{"version":3,"sources":["assets/logo.svg","components/screens/StartScreen.tsx","models/DuckInfo.tsx","components/Duck.tsx","components/DuckContainer.tsx","components/screens/MainActionsScreen.tsx","components/GameScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","StartScreen","_ref","gameStateSetter","React","createElement","className","src","logo","alt","onClick","GameState","GAME","DuckInfo","duck","shop","JsDuck","_classCallCheck","this","imageClass","description","hasKotlinAttribute","name","duckName","_createClass","key","value","toLowerCase","replace","Duck","pressedFunction","PARTITION_FUNCTION","baseLabelClasses","DuckContainer","ducks","getDuckByIndex","index","length","_regeneratorRuntime","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","MAX_DUCKS_SLOTS","LIST_MODE","SET_MODE","MAP_MODE","MainActionsScreen","_useState","useState","_useState2","_slicedToArray","ducksSetter","_useState3","_useState4","mode","modeSetter","_useState5","_useState6","pressedFunctionSetter","_useState7","_useState8","infoText","infoTextSetter","initDuckShop","url","axios","get","_ref2","_asyncToGenerator","_callee","response","_context","data","_x","apply","arguments","sendActionRequest","responseHandler","post","map","headers","Content-Type","START","clonedDucks","parsedDucks","BASE_BUTTON_ACTION_CLASSES","alert","reduce","accumulator","concat","BASE_BUTTON_COLLECTION_CLASSES","window","GameScreen","App","gameState","reportWebVitals","onPerfEntry","Function","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","defaults","baseURL","process","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.bf41c0d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.59194e54.svg\";","import logo from \"../../assets/logo.svg\";\nimport {GameState} from \"../GameScreen\";\n\ntype StartScreenProps = {\n    gameStateSetter: (gs: GameState) => void\n}\n\nexport default function StartScreen({gameStateSetter}: StartScreenProps) {\n    return (\n        <div className=\"App-main-container\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n            <p className=\"App-big-name font-link-bold\">Duck Shop</p>\n            <p className=\"App-small-name font-link-base\">by Kotlin Course</p>\n            <div className=\"App-buttons-container App-display-flex\">\n                <button className=\"App-button-base App-button-start\" onClick={() => gameStateSetter(GameState.GAME)}></button>\n            </div>\n        </div>\n    );\n}\n","import {Nullable} from \"common-types\";\nimport {duck} from \"common-types\";\nimport JsDuck = duck.shop.JsDuck;\n\nexport class DuckInfo {\n    imageClass: Nullable<string>\n    description: Nullable<string>\n    hasKotlinAttribute: boolean\n\n    constructor(duck: JsDuck) {\n        this.imageClass = duck.name != \"\" ? \"App-duck-image-\" + this.duckName(duck.name) : null\n        this.description = duck.description\n        this.hasKotlinAttribute = duck.hasKotlinAttribute\n    }\n\n    duckName(name: String): String { return name.toLowerCase().replace(\" \", \"\").replace(\".\", \"\") }\n}\n","import {DuckInfo} from \"../models/DuckInfo\";\nimport {PARTITION_FUNCTION} from \"./screens/MainActionsScreen\";\n\ntype DuckProps = {\n    duck: DuckInfo,\n    pressedFunction: String\n}\n\nexport default function Duck({duck, pressedFunction}: DuckProps) {\n    let baseDucksClasses = \"App-duck-image \"\n    let baseLabelClasses = \"App-duck-container-label \"\n\n    function toAddBest() {\n        if (pressedFunction != PARTITION_FUNCTION) {\n            return false\n        }\n        return duck.hasKotlinAttribute\n    }\n\n    return(\n        <div className={\"App-duck-container\" + (toAddBest() ? \" App-duck-container-best\" : \"\")}>\n            <div className={duck.imageClass == null ? baseDucksClasses : baseDucksClasses + duck.imageClass}></div>\n            <div className={duck.description == null ? baseLabelClasses + \"App-display-none\" : baseLabelClasses}>{duck.description}</div>\n        </div>\n    )\n}\n","import {duck} from \"common-types\";\nimport JsDuck = duck.shop.JsDuck;\nimport {DuckInfo} from \"../models/DuckInfo\";\nimport Duck from \"./Duck\";\n\ntype DuckContainerProps = {\n    ducks: Array<JsDuck>,\n    pressedFunction: String\n}\n\nexport default function DuckContainer({ducks, pressedFunction}: DuckContainerProps) {\n    function getDuckByIndex(index: number): DuckInfo {\n        if (ducks.length > index) {\n            return new DuckInfo(ducks[index])\n        }\n        return new DuckInfo(new JsDuck(\"\", null, false))\n    }\n\n    return(\n        <div className=\"App-ducks-container\">\n            <div className=\"App-ducks-row App-ducks-row-top\">\n                <Duck duck={getDuckByIndex(0)} pressedFunction={pressedFunction}></Duck>\n                <Duck duck={getDuckByIndex(1)} pressedFunction={pressedFunction}></Duck>\n                <Duck duck={getDuckByIndex(2)} pressedFunction={pressedFunction}></Duck>\n            </div>\n            <div className=\"App-ducks-row App-ducks-row-bottom\">\n                <Duck duck={getDuckByIndex(3)} pressedFunction={pressedFunction}></Duck>\n                <Duck duck={getDuckByIndex(4)} pressedFunction={pressedFunction}></Duck>\n                <Duck duck={getDuckByIndex(5)} pressedFunction={pressedFunction}></Duck>\n            </div>\n        </div>\n    )\n}\n","import {GameState} from \"../GameScreen\";\nimport {useState} from \"react\";\nimport {duck} from \"common-types\";\nimport JsDuck = duck.shop.JsDuck;\nimport axios from \"axios\";\nimport DuckContainer from \"../DuckContainer\";\n\ntype MainActionsScreenProps = {\n    gameStateSetter: (gs: GameState) => void\n}\n\nconst MAX_DUCKS_SLOTS = 6\nconst LIST_MODE = \"List\"\nconst SET_MODE = \"Set\"\nconst MAP_MODE = \"Map\"\n\nexport const PARTITION_FUNCTION = \"partition\"\n\nexport default function MainActionsScreen({gameStateSetter}: MainActionsScreenProps) {\n    let [ducks, ducksSetter] = useState<Array<JsDuck>>([])\n    let [mode, modeSetter] = useState<String>(\"\")\n    let [pressedFunction, pressedFunctionSetter] = useState<String>(\"\")\n    let [infoText, infoTextSetter] = useState<String>(\"\")\n\n    function initDuckShop(url: string) {\n        axios.get(url).then(async (response) => {\n            ducksSetter(response.data as Array<JsDuck>)\n        })\n    }\n\n    function initListOfDucks() {\n        initDuckShop(\"/mode/list\")\n        modeSetter(LIST_MODE)\n        infoTextSetter(\"\")\n        pressedFunctionSetter(\"\")\n    }\n\n    function initSetOfDucks() {\n        initDuckShop(\"/mode/set\")\n        modeSetter(SET_MODE)\n        infoTextSetter(\"\")\n        pressedFunctionSetter(\"\")\n    }\n\n    function initMapOfDucks() {\n        initDuckShop(\"/mode/map\")\n        modeSetter(MAP_MODE)\n        infoTextSetter(\"\")\n        pressedFunctionSetter(\"\")\n    }\n\n    function wasGameInitialized() {\n        return ducks.length != 0;\n    }\n\n    function canAddDuck() {\n        return ducks.length < MAX_DUCKS_SLOTS\n    }\n\n    function canRemoveDuck() {\n        return ducks.length > 0\n    }\n\n    function sendActionRequest(url: String, responseHandler: (response: any) => void) {\n        axios.post(\"/functions/\" + url, {\n            \"ducks\": ducks.map((duck) => duck.name),\n            \"mode\": mode\n        }, {headers: {'Content-Type': 'application/json'}})\n            .then((response) => {\n                responseHandler(response)\n            })\n    }\n\n    function shuffleDucks() {\n        sendActionRequest(\"shuffle\", (response) => {\n            ducksSetter(response.data as Array<JsDuck>)\n            pressedFunctionSetter(\"\")\n            infoTextSetter(\"Ducks have been \\nshuffled randomly!\")\n        })\n    }\n\n    function sortDucks() {\n        sendActionRequest(\"sort\", (response) => {\n            ducksSetter(response.data as Array<JsDuck>)\n            pressedFunctionSetter(\"\")\n            infoTextSetter(\"Ducks have been sorted \\naccording to the price of the stuff!\")\n        })\n    }\n\n    function partitionDucks() {\n        sendActionRequest(PARTITION_FUNCTION, (response) => {\n            let result = response.data as Array<Array<JsDuck>>\n            if (result.length != 2) {\n                return\n            }\n            if (result[0].length == 0) {\n                alert(\"Sorry, ducks with Kotlin stuff haven’t been found!\")\n            } else {\n                ducksSetter(result.reduce((accumulator, value) => accumulator.concat(value), []))\n                pressedFunctionSetter(PARTITION_FUNCTION)\n                infoTextSetter(\"Ducks with Kotlin stuff have been moved \\nto the beginning of the collection!\")\n            }\n        })\n    }\n\n    function filterDuck() {\n        sendActionRequest(\"filter\", (response) => {\n            let filteredDucks = response.data as Array<JsDuck>\n            if (filteredDucks.length == 0) {\n                alert(\"Sorry, ducks with Kotlin stuff were not found!\")\n            } else {\n                ducksSetter(response.data as Array<JsDuck>)\n                pressedFunctionSetter(\"\")\n                infoTextSetter(\"Only ducks with Kotlin \\nstuff have been left!\")\n            }\n        })\n    }\n\n    function addDuck() {\n        sendActionRequest(\"add\", (response) => {\n            let duck = response.data as JsDuck\n            const clonedDucks: Array<JsDuck> = []\n            ducks.push(duck)\n            ducks.forEach(duck => clonedDucks.push(duck))\n            ducksSetter(clonedDucks)\n            pressedFunctionSetter(\"\")\n            infoTextSetter(\"A new random duck has been \\ngenerated successfully!\")\n        })\n    }\n\n    function removeDuck() {\n        sendActionRequest(\"remove\", (response) => {\n            let parsedDucks = response.data as Array<JsDuck>\n            ducksSetter(parsedDucks)\n            pressedFunctionSetter(\"\")\n            infoTextSetter(\"A random duck has been \\nremoved successfully!\")\n            if (parsedDucks.length == 0) {\n                modeSetter(\"\")\n                infoTextSetter(\"\")\n            }\n        })\n    }\n\n    const BASE_BUTTON_COLLECTION_CLASSES = \"App-button-base App-button-collection\"\n    const BASE_BUTTON_ACTION_CLASSES = \"App-button-base App-button-action\"\n\n    return (\n        <div className=\"App-main-container\">\n            <div className=\"App-buttons-container\">\n                <button className=\"App-button-base App-game-button-bottom-base App-button-back\" onClick={() => {\n                    gameStateSetter(GameState.START)\n                    infoTextSetter(\"\")\n                }\n                }></button>\n            </div>\n            {\n                wasGameInitialized() ?\n                    <div>\n                        <div className=\"App-info-container\">\n                            <div className=\"App-info-container-text font-link-base\">{infoText}</div>\n                        </div>\n                        <div className=\"App-functions-container\">\n                            <button\n                                className={\"App-button-base App-button-action App-button-add \" + (canAddDuck() ? \"\" : \"App-unclickable-button\")}\n                                onClick={() => addDuck()}></button>\n                            <button\n                                className={\"App-button-base App-button-action App-button-remove\" + (canRemoveDuck() ? \"\" : \"App-unclickable-button\")}\n                                onClick={() => removeDuck()}></button>\n                            <button\n                                className={BASE_BUTTON_ACTION_CLASSES + \" App-button-sort\" + (mode == LIST_MODE ? \"\" : \" App-unclickable-button\")}\n                                onClick={() => sortDucks()}></button>\n                            <button\n                                className={BASE_BUTTON_ACTION_CLASSES + \" App-button-shuffle\" + (mode == LIST_MODE ? \"\" : \" App-unclickable-button\")}\n                                onClick={() => shuffleDucks()}></button>\n                            <button className={BASE_BUTTON_ACTION_CLASSES + \" App-button-filter\"}\n                                    onClick={() => filterDuck()}></button>\n                            <button\n                                className={BASE_BUTTON_ACTION_CLASSES + \" App-button-partition\" + (mode == MAP_MODE ? \" App-unclickable-button\" : \"\")}\n                                onClick={() => partitionDucks()}></button>\n                        </div>\n                        <DuckContainer ducks={ducks} pressedFunction={pressedFunction}></DuckContainer>\n                    </div>\n                    : <div className=\"App-base-text\">\n                        <div className=\"font-link-base\">Please initialize the duck shop!</div>\n                    </div>\n            }\n            <div className=\"App-buttons-container\">\n                <button\n                    className={BASE_BUTTON_COLLECTION_CLASSES + \" App-button-list\" + (mode == LIST_MODE ? \" App-button-list-focused\" : \"\")}\n                    onClick={() => initListOfDucks()}></button>\n                <button\n                    className={BASE_BUTTON_COLLECTION_CLASSES + \" App-button-set\" + (mode == SET_MODE ? \" App-button-set-focused\" : \"\")}\n                    onClick={() => initSetOfDucks()}></button>\n                <button\n                    className={BASE_BUTTON_COLLECTION_CLASSES + \" App-button-map\" + (mode == MAP_MODE ? \" App-button-map-focused\" : \"\")}\n                    onClick={() => initMapOfDucks()}></button>\n            </div>\n        </div>\n    );\n}\n","import StartScreen from \"./screens/StartScreen\";\nimport React from \"react\";\nimport MainActionsScreen from \"./screens/MainActionsScreen\";\nwindow.React = React\n\nexport enum GameState {\n    START,\n    GAME,\n}\n\nexport type GameScreenProps = {\n    state: GameState,\n    gameStateSetter: (gs: GameState) => void,\n}\n\nexport default function GameScreen({state, gameStateSetter}: GameScreenProps) {\n    switch (state) {\n        case GameState.START: {\n            return <StartScreen gameStateSetter={gameStateSetter}/>\n        }\n        case GameState.GAME: {\n            return <MainActionsScreen gameStateSetter={gameStateSetter}/>\n        }\n    }\n}\n","import './App.css';\nimport './util/util'\nimport {useState} from \"react\";\nimport GameScreen, {GameState} from \"./components/GameScreen\";\n\nfunction App() {\n    let [gameState, gameStateSetter] = useState(GameState.START)\n\n    switch (gameState) {\n        case GameState.START: {\n            return (<div className=\"App\">\n                <header className=\"App-header-base App-header-black\">\n                    <GameScreen state={gameState}\n                                gameStateSetter={gameStateSetter}\n                    />\n                </header>\n            </div>);\n        }\n        default: {\n            return (<div className=\"App\">\n                <header className=\"App-header-base App-header-white\">\n                    <GameScreen state={gameState}\n                                gameStateSetter={gameStateSetter}\n                    />\n                </header>\n            </div>);\n        }\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport axios from \"axios\";\n\n// from .env.development or .env.production\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}